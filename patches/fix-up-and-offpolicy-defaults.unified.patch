--- a/src/App.jsx
+++ b/src/App.jsx
@@ -820,13 +820,23 @@
   async function cloudSave() { setUI(prev=>({...prev, sync:"loading"}));
     try{
       const headers={ "Content-Type":"application/json", "X-Write-Token": cloud.writeToken };
       if(cloud.apiKey) headers["X-API-Key"]=cloud.apiKey;
       const payload = state; // si quieres excluir PINs: const { security, ...payload } = state;
       const out = await api(`/state/${encodeURIComponent(cloud.spaceId)}`, { method:"PUT", headers, body: JSON.stringify({ payload, read_token: cloud.readToken || null }) }, auth.token);
       setUI(prev=>({...prev, sync:"ok"})); showToast("Guardado en nube");
     }catch(e){ setUI(prev=>({...prev, sync:"error"})); showToast((String(e.message||"")).startsWith("403")?"403: ReadToken inválido o sin permisos":"Error al cargar: "+e.message); }
   }
 
   // ---------- Utilidades de estado ----------
-  function up(path,value){ setState(prev=>{ const next=structuredClone(prev); let o=next; for(let i=0;i<path.length-1;i++) o=o[path[i]]; o[path[path.length-1]]=value; return next; }); }
+  function up(path,value){
+    setState(prev=>{
+      const next = structuredClone(prev);
+      let o = next;
+      for (let i=0; i<path.length-1; i++){
+        const k = path[i];
+        if (typeof o[k] !== 'object' || o[k] === null) o[k] = {};
+        o = o[k];
+      }
+      o[path[path.length-1]] = value;
+      return next;
+    });
+  }
   function upPerson(id,patch){ setState(prev=>({...prev, people: prev.people.map(p=> p.id===id? {...p,...patch}:p)})); }
@@ -770,12 +770,23 @@
   async function cloudLoad() { setUI(prev=>({...prev, sync:"loading"}));
     if (!isAdmin && !cloud.readToken) { showToast("Falta ReadToken"); setUI(prev=>({...prev, sync:"error"})); return; }
     try{
       const extra={}; if(cloud.apiKey) extra["X-API-Key"]=cloud.apiKey; if(cloud.readToken) extra["X-Read-Token"]=cloud.readToken;
       const data = await api(`/state/${encodeURIComponent(cloud.spaceId)}`, { method:"GET" }, auth.token, extra);
       if(!data.payload){ alert("No hay datos guardados para ese Space ID"); return; }
       const payload = { ...data.payload };
       if (!payload.conciliacion) payload.conciliacion = safeConciliacion();
       if (typeof payload.applyConciliation === 'undefined') payload.applyConciliation = true;
+      // Defaults para políticas OFF si no existen en nube
+      if (!payload.offPolicy) {
+        payload.offPolicy = {
+          enableLimitOffOnVacationWeek: true,
+          limitOffDays: [3,4,5], // X-J-V
+          enableBlockFullOffAdjacentWeeks: true,
+          adjacencyWindow: 1
+        };
+      }
       setState(prev=>({ ...prev, ...payload }));
       setUI(prev=>({...prev, sync:"ok"})); showToast("Cargado de nube");
     }catch(e){ setUI(prev=>({...prev, sync:"error"})); showToast((String(e.message||"")).startsWith("403")?"403: ReadToken inválido o sin permisos":"Error al cargar: "+e.message); }
   }

