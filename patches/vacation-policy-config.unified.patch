--- a/src/App.jsx
+++ b/src/App.jsx
@@ -47,6 +47,18 @@ function expandRange(s,e){ const S=parseDateValue(s), E=parseDateValue(e); const
 function isHolidayDate(dateStr, province){ const list=HOLIDAYS_2025[province]||[]; return list.includes(dateStr); }
 function countVacationDaysConsideringHolidays(s,e,province,consume){ const dates=expandRange(s,e); return dates.reduce((acc,d)=> acc + ((consume || !isHolidayDate(d,province))?1:0), 0); }
 function indexTimeOff(timeOffs){
@@
   return map;
 }
+
+// ======= Política de meses de VACACIONES =======
+// policy: { mode:'allow'|'block', months:[1..12] }  (meses 1=Enero ... 12=Diciembre)
+function vacationMonthAllowed(dateStr, policy){
+  if (!policy || !Array.isArray(policy.months) || policy.months.length===0) return true;
+  const m = parseDateValue(dateStr).getMonth()+1; // 1..12
+  return (policy.mode==='block') ? !policy.months.includes(m) : policy.months.includes(m);
+}
+function rangeAllAllowed(start, end, policy){
+  return expandRange(start,end).every(ds => vacationMonthAllowed(ds, policy));
+}
 
 // ===================== Reglas duras convenio =====================
 function respectsRules({personId, date, shift, assignmentsSoFar, weeklyMinutes, rules}){
@@ -528,6 +540,12 @@ export default function App(){
     swaps: [], showArchivedSwaps:false,
     rules: { enforce:true, maxDailyHours:9, maxWeeklyHours:40, minRestHours:12 },
     applyConciliation: true,
     conciliacion: { penalizaDiaIslaTrabajo:3, penalizaDiaIslaLibre:2, penalizaCortesSemana:1 },
 
     offPolicy: {
       enableLimitOffOnVacationWeek: true,
       limitOffDays: [3,4,5], // X(3), J(4), V(5) -> getDay(): 0=Dom..6=Sáb
       enableBlockFullOffAdjacentWeeks: true,
       adjacencyWindow: 1
     },
+    // Política de meses permitidos/prohibidos para VACACIONES
+    vacationPolicy: { mode:'allow', months:[7,8] } // por defecto: solo JUL–AGO
 });
@@ -566,6 +584,7 @@ export default function App(){
         <section className="lg:col-span-1 space-y-6">
           <ConfigBasica state={state} up={up} />
           <ReglasPanel state={state} up={up} />
           <OffPolicyPanel state={state} up={up} />
+          <VacationPolicyPanel state={state} up={up} />
           <ConciliacionPanel state={state} up={up} />
           <PersonasPanel state={state} upPerson={upPerson} />
           <TurnosPanel state={state} up={up} />
           <FestivosPanel state={state} up={up} />
@@ -611,6 +630,16 @@ export default function App(){
       const payload = { ...data.payload };
       if (!payload.conciliacion) payload.conciliacion = safeConciliacion();
       if (typeof payload.applyConciliation === 'undefined') payload.applyConciliation = true;
+      // Defaults offPolicy si falta
+      if (!payload.offPolicy) {
+        payload.offPolicy = { enableLimitOffOnVacationWeek:true, limitOffDays:[3,4,5], enableBlockFullOffAdjacentWeeks:true, adjacencyWindow:1 };
+      }
+      // Defaults vacationPolicy si falta
+      if (!payload.vacationPolicy) {
+        payload.vacationPolicy = { mode:'allow', months:[7,8] }; // JUL–AGO
+      }
+      if (typeof window !== "undefined") window.__OFF_POLICY__ = payload.offPolicy || {};
+
       setState(prev=>({ ...prev, ...payload }));
       setUI(prev=>({...prev, sync:"ok"})); showToast("Cargado de nube");
     }catch(e){ setUI(prev=>({...prev, sync:"error"})); showToast((String(e.message||"")).startsWith("403")?"403: ReadToken inválido o sin permisos":"Error al cargar: "+e.message); }
@@ -1005,6 +1034,15 @@ function TimeOffPanel({ state, setState, controls, isAdmin, currentUser }){
   const [newTO,setNewTO]=useState({ personId: state.people[0]?.id||"P1", start: state.startDate, end: state.startDate, type:'vacaciones', note:'', hoursPerDay: state.travelDefaultHours, status: 'pendiente' });
 
   function addTimeOff(){
     const rec={...newTO};
+    // Validación de meses permitidos/prohibidos para VACACIONES
+    if (rec.type==='vacaciones'){
+      const ok = rangeAllAllowed(rec.start, rec.end, state.vacationPolicy);
+      if (!ok){
+        const vp = state.vacationPolicy || {};
+        const meses = (vp.months||[]).join(', ');
+        alert(`Vacaciones fuera de política. Modo: ${vp.mode||'allow'} · Meses: ${meses}`);
+        return;
+      }
+    }
     if(rec.type==='vacaciones' && rec.status==='aprobada'){
       const adding=countVacationDaysConsideringHolidays(rec.start,rec.end,state.province,state.consumeVacationOnHoliday);
       const used=controls.vacationUsedNaturalByPerson.get(rec.personId)||0; const allowed=state.vacationDaysNatural;
       if(used+adding>allowed){ alert(`No se puede añadir: excede las vacaciones (${used}+${adding} > ${allowed}).`); return; }
@@ -1718,6 +1756,73 @@ function OffPolicyPanel({ state, up }){
   );
 }
 
+// ===== Política de Vacaciones (meses permitidos/prohibidos) =====
+function VacationPolicyPanel({ state, up }){
+  const vp = state.vacationPolicy || { mode:'allow', months:[] };
+  const months = [
+    {k:1,  lbl:'Ene'}, {k:2,  lbl:'Feb'}, {k:3,  lbl:'Mar'}, {k:4,  lbl:'Abr'},
+    {k:5,  lbl:'May'}, {k:6,  lbl:'Jun'}, {k:7,  lbl:'Jul'}, {k:8,  lbl:'Ago'},
+    {k:9,  lbl:'Sep'}, {k:10, lbl:'Oct'}, {k:11, lbl:'Nov'}, {k:12, lbl:'Dic'}
+  ];
+  function toggleMonth(m){
+    const set = new Set(vp.months || []);
+    if (set.has(m)) set.delete(m); else set.add(m);
+    up(['vacationPolicy'], { ...vp, months: Array.from(set).sort((a,b)=>a-b) });
+  }
+  function setMode(mode){
+    up(['vacationPolicy'], { ...vp, mode });
+  }
+  return (
+    <Card title="Política de Vacaciones (meses)">
+      <div className="grid grid-cols-12 gap-3 text-sm">
+        <div className="col-span-12 flex items-center gap-4">
+          <label className="inline-flex items-center gap-2">
+            <input type="radio" name="vp-mode" checked={(vp.mode||'allow')==='allow'} onChange={()=>setMode('allow')} />
+            Permitir SOLO en los meses seleccionados
+          </label>
+          <label className="inline-flex items-center gap-2">
+            <input type="radio" name="vp-mode" checked={vp.mode==='block'} onChange={()=>setMode('block')} />
+            Bloquear los meses seleccionados
+          </label>
+        </div>
+        <div className="col-span-12">
+          <div className="flex flex-wrap gap-2">
+            {months.map(m=>(
+              <label key={m.k} className={`px-2 py-1 rounded border cursor-pointer ${ (vp.months||[]).includes(m.k) ? 'bg-slate-100' : ''}`}>
+                <input
+                  type="checkbox"
+                  className="mr-1"
+                  checked={(vp.months||[]).includes(m.k)}
+                  onChange={()=>toggleMonth(m.k)}
+                />
+                {m.lbl}
+              </label>
+            ))}
+          </div>
+          <div className="text-[11px] text-slate-500 mt-2">
+            * El modo <b>Permitir</b> acepta vacaciones sólo en esos meses. El modo <b>Bloquear</b> las impide en esos meses.
+          </div>
+        </div>
+      </div>
+    </Card>
+  );
+}
